/*
 * Budgeting Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing GroupTransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupTransactionsApiTests : IDisposable
    {
        private GroupTransactionsApi instance;

        public GroupTransactionsApiTests()
        {
            instance = new GroupTransactionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GroupTransactionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GroupTransactionsApi
            //Assert.IsType<GroupTransactionsApi>(instance);
        }

        /// <summary>
        /// Test AddGroupTransaction
        /// </summary>
        [Fact]
        public void AddGroupTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid groupUuid = null;
            //TransactionCreate transactionCreate = null;
            //var response = instance.AddGroupTransaction(groupUuid, transactionCreate);
            //Assert.IsType<TransactionRead>(response);
        }

        /// <summary>
        /// Test DeleteGroupTransaction
        /// </summary>
        [Fact]
        public void DeleteGroupTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid transactionUuid = null;
            //Guid groupUuid = null;
            //var response = instance.DeleteGroupTransaction(transactionUuid, groupUuid);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test GetGroupTransaction
        /// </summary>
        [Fact]
        public void GetGroupTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid groupUuid = null;
            //Guid transactionUuid = null;
            //var response = instance.GetGroupTransaction(groupUuid, transactionUuid);
            //Assert.IsType<TransactionRead>(response);
        }

        /// <summary>
        /// Test GetGroupTransactions
        /// </summary>
        [Fact]
        public void GetGroupTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid groupUuid = null;
            //DateTime? before = null;
            //DateTime? after = null;
            //int? page = null;
            //int? itemsPerPage = null;
            //var response = instance.GetGroupTransactions(groupUuid, before, after, page, itemsPerPage);
            //Assert.IsType<PaginatedListResponseTransactionRead>(response);
        }

        /// <summary>
        /// Test UpdateGroupTransaction
        /// </summary>
        [Fact]
        public void UpdateGroupTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid transactionUuid = null;
            //Guid groupUuid = null;
            //TransactionUpdate transactionUpdate = null;
            //var response = instance.UpdateGroupTransaction(transactionUuid, groupUuid, transactionUpdate);
            //Assert.IsType<Message>(response);
        }
    }
}
