/*
 * Budgeting Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UsersApi
            //Assert.IsType<UsersApi>(instance);
        }

        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Fact]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserCreate userCreate = null;
            //var response = instance.CreateUser(userCreate);
            //Assert.IsType<UserRead>(response);
        }

        /// <summary>
        /// Test DbDeleteUser
        /// </summary>
        [Fact]
        public void DbDeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.DbDeleteUser(username);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Fact]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.DeleteUser(username);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.GetUser(username);
            //Assert.IsType<UserRead>(response);
        }

        /// <summary>
        /// Test GetUserRateLimits
        /// </summary>
        [Fact]
        public void GetUserRateLimitsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.GetUserRateLimits(username);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetUserTier
        /// </summary>
        [Fact]
        public void GetUserTierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.GetUserTier(username);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Fact]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? itemsPerPage = null;
            //var response = instance.GetUsers(page, itemsPerPage);
            //Assert.IsType<PaginatedListResponseUserRead>(response);
        }

        /// <summary>
        /// Test GetUsersMe
        /// </summary>
        [Fact]
        public void GetUsersMeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUsersMe();
            //Assert.IsType<UserRead>(response);
        }

        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Fact]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //UserUpdate userUpdate = null;
            //var response = instance.UpdateUser(username, userUpdate);
            //Assert.IsType<Message>(response);
        }

        /// <summary>
        /// Test UpdateUserTier
        /// </summary>
        [Fact]
        public void UpdateUserTierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //UserTierUpdate userTierUpdate = null;
            //var response = instance.UpdateUserTier(username, userTierUpdate);
            //Assert.IsType<Message>(response);
        }
    }
}
